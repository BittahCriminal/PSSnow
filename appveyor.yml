os: WMF 5

skip_non_tags: true

skip_commits:
  files:
    - README.md
    - CHANGELOG.md
  message: /updated readme.*|update readme.*s|updated docs.*|updated documentation.*|updated version.*|updated appveyor.*/

install:
  - cinst pester
  - ps: Install-PackageProvider -Name NuGet -Force
  - ps: Install-Module PsScriptAnalyzer -Force

build: false

test_script:
  - ps: |
        $ErrorActionPreference = 'Stop'

        Write-Host 'Adding PsScriptAnalyzer test'
        Add-AppveyorTest -Name 'PsScriptAnalyzer' -Filename 'PsScriptAnalyzer' -Outcome Running
        Write-Host 'Performing PSScriptAnalyzer tests'
        $stopwatch =  [system.diagnostics.stopwatch]::StartNew()
        $Results = Invoke-ScriptAnalyzer -Path ".\src" -Recurse -Profile @{Severity = @('Error', 'Warning')}
        $stopwatch.Stop()
        
        $AppveyorTestSplat = @{
          Name = 'PsScriptAnalyzer'
          Filename = 'PsScriptAnalyzer'
          Duration = [int]$stopwatch.elapsed.TotalMilliseconds
        }


        if ($Results) {
          Write-Host 'PSScriptAnalyzer returned errors/warnings that need to be addressed.'
          $ResultString = $Results | Out-String
          Write-Warning $ResultString
          Add-AppveyorMessage -Message "PSScriptAnalyzer output contained one or more result(s) with 'Error/Warning' severity. Check the 'Tests' tab of this build for more details." -Category Error
          Update-AppveyorTest @AppveyorTestSplat -Outcome Failed -ErrorMessage $ResultString
          
          throw 'Build failed'
        } else {
          Write-Host 'PSScriptAnalyzer returned nothing that needs to be addressed.'
          Update-AppveyorTest @AppveyorTestSplat -Outcome Passed
        }

        Write-Host 'Performing Pester tests'
        $res = Invoke-Pester -Path ".\Tests" -OutputFormat NUnitXml -OutputFile TestsResults.xml -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestsResults.xml))
        if ($res.FailedCount -gt 0) { throw "$($res.FailedCount) tests failed."}
        Write-Host 'All tests complete'